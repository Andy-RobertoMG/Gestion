@inject HttpClient Http
<div class="modal fade  show @(showModal?"show d-block":"")" id="assignmentCreate" tabindex="-1" aria-labelledby="assignmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-deep-space-sparkle text-white d-flex justify-content-between">
                <h1 class="modal-title fw-bolder fs-5" id="exampleModalLabel">Agregar nueva asignación</h1>
                <div>
                    <i class="fs-3 fw-bolder bi bi-x" @onclick=CloseModal></i>
                </div>
            </div>
            <EditForm Model="assignment" OnValidSubmit="SaveData">
                <div class="modal-body">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="d-flex align-items-center gap-2">
                        <label>Nombre:</label>
                        <InputText @bind-Value="assignment.Name" class="form-control"></InputText>
                    </div>
                    <ValidationMessage For="@(() => assignment.Name)" />
                    @if (error)
                    {
                        <p class="m-0 validation-message">@mensaje</p>
                    }
                </div>
                <div class="d-flex justify-content-center gap-2 pt-4 pb-4">
                    <button type="submit" class="btn bg-deep-space-sparkle text-white">Aceptar</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" @onclick=CloseModal>Cerrar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@if (showModal)
{
    <div class="modal-backdrop-modified fade show"></div>
}

@code {
    bool showModal = false, error = false;
    string mensaje;
    private AssigmentUpdateDTO assignment = new(); 
    [Parameter]
    public EventCallback OnSave { get; set; }
    private async Task SaveData()
    { 
        try
        {
            if (assignment.GoalId == 0)
            {
                toast.ShowWarning("Se debe seleccionar una meta");
                return;
            }
            var response = await Http.PostAsJsonAsync<AssigmentUpdateDTO>("api/Assignments", assignment);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Tarea guardada exitosamente.";
                error = false;
                showModal = false;
                assignment = new();
                await OnSave.InvokeAsync();
            }
            else
            {
                error = true;
                mensaje = await response.Content.ReadAsStringAsync(); 
                if (!mensaje.Contains("El nombre de la tarea no está disponible."))
                {
                    toast.ShowWarning($"Razon:{response.ReasonPhrase}.Codigo de Estado:{response.StatusCode}.{mensaje}");
                }
            }
        }
        catch (Exception ex)
        {
            // Manejar la excepción
        }
    }
    public void ShowModal(int id)
    {
        showModal = true;
        assignment.GoalId = id;
        StateHasChanged();
    }
    private void CloseModal()
    {
        showModal = false;
        error = false;
    }
}

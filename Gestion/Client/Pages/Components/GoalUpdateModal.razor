@inject HttpClient Http
<div class="modal fade  show @(showModal?"show d-block":"")" id="goalCreate" tabindex="-1" aria-labelledby="goalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-deep-space-sparkle text-white d-flex justify-content-between">
                <h1 class="modal-title fw-bolder fs-5" id="exampleModalLabel">Editar meta</h1>
                <div>
                    <i class="fs-3 fw-bolder bi bi-x" @onclick=CloseModal></i>
                </div>
            </div>
            <EditForm Model="goal" OnValidSubmit="SaveData">
                <div class="modal-body">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="d-flex align-items-center gap-2">
                        <label>Nombre:</label>
                        <InputText @bind-Value="goal.Name" class="form-control"></InputText>
                    </div>
                    <ValidationMessage For="@(() => goal.Name)" />
                    @if (error)
                    {
                        <p class="m-0 validation-message">@mensaje</p>
                    }
                </div>
                <div class="d-flex justify-content-center gap-2 pt-4 pb-4">
                    <button type="submit" class="btn bg-deep-space-sparkle text-white">Aceptar</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" @onclick=CloseModal>Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@if (showModal)
{
    <div class="modal-backdrop-modified fade show"></div>
}

@code {
    bool showModal = false, error = false;
    string mensaje =string.Empty;
    private GoalUpdateDTO goal = new();
    private int id = new();

    [Parameter]
    public EventCallback OnSave { get; set; }

    private async Task SaveData()
    {

        try
        {
            var response = await Http.PutAsJsonAsync<GoalUpdateDTO>($"api/Goals/{id}", goal);

            if (response.IsSuccessStatusCode)
            { 
                error = false;
                showModal = false;
                goal = new();
                await OnSave.InvokeAsync();
                toast.ShowSuccess("Meta actualizada exitosamente.");
            }
            else
            {
                error = true;
                mensaje = await response.Content.ReadAsStringAsync();
                if (!mensaje.Contains("El nombre no está disponible"))
                {
                    toast.ShowWarning($"Razon:{response.ReasonPhrase}.Codigo de Estado:{response.StatusCode}.{mensaje}");
                }
            }
        }
        catch (Exception ex)
        {
            toast.ShowError($"Error:{ex.Message}.{ex.InnerException}");
        }
    }
    public void ShowModal(int idSelected,string goalSelected )
    {
        goal = new()
        {
            Name=goalSelected
        };
        id = idSelected;
        showModal = true;
        StateHasChanged();
    }
    private void CloseModal()
    {
        showModal = false;
        goal = new();
    }
}

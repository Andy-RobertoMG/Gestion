@page "/" 
@inject HttpClient Http
<PageTitle>Gestion de Mestass</PageTitle> 
<section class="layout-body">
    <div class="top bg-white d-flex p-2 border-left-green ">
        <p class="align-self-center m-0">Control de Metass</p>
    </div>
    <div class="left bg-white  p-2" style=" overflow-y: auto;">
        <button class="btn text-white d-flex bg-deep-space-sparkle mb-4" @onclick=ShowNewGoalModal>
            <span class="oi oi-plus align-self-center h5  me-1"></span>
            <p class="m-0 align-self-center">Nueva meta</p>
        </button>

        @foreach (var goal in goalDTO)
        {
            <div class="w-100 goal-item p-1 d-flex " @onclick=@(()=>SelectGoal(goal))>
                <div class="col-9">
                    <p class="fw-bold">@goal.GoalName</p>
                    <p>Fecha creada: @goal.CreatedDate.ToString("dd/MM/yyyy")</p>
                </div>
                <div class="col-3 d-flex gap-2 justify-content-end">
                    <span class="fs-4 bi bi-pencil-fill text-black-50" @onclick="@(()=>SelectUpdateGoal(goal.GoalId,goal.GoalName))"></span>
                    <i class="fs-4 bi bi-trash-fill text-black-50" @onclick="@(()=>SelectDeleteGoal(goal.GoalId,goal.GoalName))"></i>
                </div>

            </div>
        }
    </div>
    <div class="right bg-white">
        <div class="w-100 bg-deep-space-sparkle ps-2 pt-2 pb-2">
            <p class="text-white fw-bold align-self-center m-0" style="min-height:1rem;">@goalSelected.GoalName</p>  
        </div>
        <div class="m-3">
            <div class="border-green border-bottom-0 p-2 gap-2 d-flex justify-content-start">
                <button class="btn text-white d-flex bg-deep-space-sparkle" @onclick="SelectNewAssigment">
                    <span class="oi oi-plus m-0 align-self-center me-1"></span>
                    <p class="m-0 align-self-center">Agregar tarea</p>
                </button>
                <button class="btn text-white d-flex bg-deep-space-sparkle">
                    <span class="fs-4 bi bi-check-circle m-0 align-self-center me-1"></span>
                    <p class="m-0 align-self-center">Completar tarea</p>
                </button>
                <button class="btn text-white d-flex bg-deep-space-sparkle">
                    <span class="fs-4 bi bi-pencil-fill m-0 align-self-center me-1"></span>
                    <p class="m-0 align-self-center">Editar</p>
                </button>
                <button class="btn text-white d-flex bg-deep-space-sparkle">
                    <span class="fs-4 bi bi-trash-fill m-0 align-self-center me-1"></span>
                    <p class="m-0 align-self-center">Eliminar</p>
                </button>
            </div>
            <div class="table-responsive">
                <table class="table alternate-rows table-body-color table-bordered m-0">
                    <thead class="table-light table-head-border-color ">
                        <tr class="header-color header-body">
                            <th scope="col"><input type="checkbox"></th>
                            <th></th>
                            <th scope="col">Tarea <input type="text" class="form-control form-control-sm mt-1" placeholder=""></th>
                            <th scope="col">Fecha <input type="datetime" class="form-control form-control-sm mt-1" ></th>
                            <th scope="col">Estado <input type="text" class="form-control form-control-sm mt-1" placeholder=""></th>
                        </tr>
                    </thead>
                    <tbody class="tbody-border-color">
                        @foreach (var assigment in assigmentDTO)
                        {
                            <tr>
                                <td><input type="checkbox" value="(@(idSelAssigment.Contains(assigment.AssignmentId))" ></td>
                                <td><i class="bi bi-star star-icon-gray"></i></td>
                                <td> @assigment.AssignmentName</td>
                                <td>@assigment.CreatedDate.ToString("dd/MM/yyyy")</td>
                                <td class="status-open">@assigment.AssignmentStatus</td>
                            </tr>
                        } 
                        
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between border-green border-top-0 ps-1 pe-1 ">
                <div class="fs-5 gap-1 d-flex align-content-center ">
                    <i class="bi bi-skip-start-fill d-flex align-items-center"></i>
                    <i class="bi bi-caret-left-fill d-flex align-items-center"></i>
                    <div class="bg-deep-space-sparkle text-white d-flex justify-content-center align-items-center" style="width:2rem;height:2rem;">
                        1
                    </div>
                    <i class="bi bi-caret-right-fill d-flex align-items-center"></i>
                    <i class="bi bi-skip-end-fill d-flex align-items-center"></i>
                </div>
                <div class="d-flex align-items-center me-3">1-2 de 2 registros</div>
            </div>
        </div>
    </div>
</section>
<NewGoalModal @ref="newGoalModal" OnSave="LoadGoalData"/>
<UpdateGoalModal @ref="updateGoalModal"  OnSave="LoadGoalData"/>
<DeleteGoalModal @ref="deleteGoalModal" OnSave="LoadGoalData"/>
<AssigmentNewModal @ref="assigmentNewModal" OnSave="LoadGoalAssignment" />
@code{
    NewGoalModal newGoalModal = new();
    UpdateGoalModal updateGoalModal = new();
    DeleteGoalModal deleteGoalModal = new();
    AssigmentNewModal assigmentNewModal = new();
    GoalDTO goalSelected = new();
    List<GoalDTO> goalDTO = new();
    List<AssignmentDTO> assigmentDTO = new();
    bool showBackDrop = false,showModifyModal =false,errorUpdate= false;
    GoalUpdateDTO selectedGoal = new();

    int idSel = 0;
    List<int> idSelAssigment = new();
    string mensaje = "";
    protected override async Task OnInitializedAsync()
    {
        await LoadGoalData();
    }
    private async Task LoadGoalData()
    {
        var response = await Http.GetAsync("api/Goals");
        if (response.IsSuccessStatusCode)
        {
            goalDTO = await response.Content.ReadFromJsonAsync<List<GoalDTO>>() ?? new();
        }
    } 
    private async Task LoadAssigmentData(int id)
    {
        var response = await Http.GetAsync($"api/Assignments/byGoal/{id}");
        if (response.IsSuccessStatusCode)
        {
            assigmentDTO = await response.Content.ReadFromJsonAsync<List<AssignmentDTO>>() ?? new();
        }
    }
    private async Task LoadGoalAssignment()
    {
        var loadGoalsTask = LoadGoalData();  
        var loadAssignmentsTask = LoadAssigmentData(goalSelected.GoalId);   
        await Task.WhenAll(loadGoalsTask, loadAssignmentsTask); 
    }
    private void ShowNewGoalModal(){
        newGoalModal.ShowModal();
    }
    private void SelectUpdateGoal(int id,string name)
    {
        updateGoalModal.ShowModal(id,name);
    }
    private void SelectDeleteGoal(int id,string name)
    {
        deleteGoalModal.ShowModal(id, name);
    }
    private void SelectNewAssigment()
    {
        assigmentNewModal.ShowModal();
    }
    private async Task SelectGoal(GoalDTO goal){
        try
        {
            goalSelected = goal;
            await LoadAssigmentData(goalSelected.GoalId);
        }catch(Exception ex)
        {
            
        }
    }
}